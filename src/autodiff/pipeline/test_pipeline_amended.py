# -*- coding: utf-8 -*-
"""Test_pipeline_amended.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gN8zRSjE2rHc8SP_gt3wgKy_9ZApz-eL
"""

#run below code twice
#import neural_testbed
#from neural_testbed.agents import factories as agent_factories
#from neural_testbed.agents.factories.sweeps import testbed_2d as agent_sweeps
#from neural_testbed import base
#from neural_testbed import generative
#from neural_testbed import leaderboard
from typing import Callable, NamedTuple
#from line_profiler import LineProfiler

import numpy as np
import pandas as pd
#import plotnine as gg
import torch
# from acme.utils.loggers.terminal import TerminalLogger
import dataclasses
#import chex
#import haiku as hk
#import jax
#import jax.numpy as jnp
#import optax

import warnings
warnings.filterwarnings('ignore')

import pipeline

#data generated from https://github.com/dakshmittal30/Adaptive_sampling/blob/49060b32a7c95ab5f8057ff593629d64ea411c14/src/notebooks/Dataset_generator.ipynb
#predictor (a logistic regression) generated from https://github.com/dakshmittal30/Adaptive_sampling/blob/49060b32a7c95ab5f8057ff593629d64ea411c14/src/notebooks/Predictor.ipynb
url = '/shared/share_mala/yuanzhe/adaptive_sampling/pipeline_datasets/'
train_csv_name = url + 'classifier_input_dim_1_train_init_data_mean_0.0ln_1.0sig_0.1no.2000.csv'
test_csv_name = url + 'classifier_input_dim_1_test_final_data_mean_0.0ln_1.0sig_0.1no.2000.csv'
pool_csv_name = url + 'classifier_input_dim_1_pool_data_mean_0.0ln_1.0sig_0.1no.2000.csv'


df_train = pd.read_csv(train_csv_name)
print('training data count',df_train.shape)


dataset_cfg = pipeline.DatasetConfig(train_csv_name, test_csv_name, pool_csv_name, "EVENT_LABEL")
model_cfg = pipeline.ModelConfig(batch_size_train = 64, batch_size_test = 64, batch_size_query = 100, temp_k_subset = 0.1, hidden_sizes_weight_NN = [50,50], meta_opt_lr = 0.001, n_classes = 2, n_epoch = 10, init_train_lr = 0.001, init_train_weight_decay = 0.1, n_train_init = 20)
train_cfg = pipeline.TrainConfig(n_train_iter = 15, n_ENN_iter = 15, ENN_opt_lr = 0.001, temp_var_recall = 0.5, z_dim = 8, N_iter = 100) #temp_var_recall is the new variable added here
enn_cfg = pipeline.ENNConfig(basenet_hidden_sizes = [50,50],  exposed_layers = [False, True], z_dim = 8, learnable_epinet_hiddens = [15,15], hidden_sizes_prior = [5,5], seed_base = 2, seed_learnable_epinet = 1, seed_prior_epinet = 0, alpha = 0.1)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model_predictor = torch.jit.load('/user/dm3766/predictor_27_1.pt').to(device)

model_predictor.eval()

# Example usage
#need to add ``pipeline.'' in the below command; I didn't add it so that I can debug more easily
pipeline.experiment(dataset_cfg, model_cfg, train_cfg, enn_cfg, model_predictor, device, if_print = 1)

#%load_ext line_profiler
#profiling code - check which part
#%reload_ext line_profiler

#%lprun -f experiment experiment(dataset_cfg, model_cfg, train_cfg, enn_cfg, model_predictor, if_print = 1)

